---
import StandardLayout from '$layouts/StandardLayout.astro';
import SocialEmbed from '$components/SocialEmbed.astro';

import AugHipLogoType from '$svg/aughip-logo.astro';
import Heart from '$svg/heart.astro';

// Socials
import Github from '$svg/github.astro';
import Discord from '$svg/discord.astro';

// Tracker Icons
import Apriltag from '$svg/apriltags.astro';
import KinectV1 from '$svg/kinect_v1.astro';
import KinectV2 from '$svg/kinect_v2.astro';
import PSEye from '$svg/pseye.astro';
import PSMove from '$svg/psmove.astro';
import TouchLink from '$svg/touch_link.astro';
import TundraLabs from '$svg/tundra_labs.astro';
import ViveTracker from '$svg/vive_tracker.astro';
import ViveWand from '$svg/vive_wand.astro';

import { LATEST_INSTALLER, GITHUB_RELEASES, DISCORD_INVITE, GITHUB_REPO } from '$/constants.js';
---
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="icon" href="/content/shared/favicon.ico">

        <SocialEmbed
            title="Augmented Hip: Virtual Hip Tracking"
            description="A free and open virtual hip tracker that estimates your hip's position and orientation using your VR headset and feet!"
            image="content/shared/banner.png"
            color="#ff009d"
        />

        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Varela+Round&display=swap" rel="stylesheet">

        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css" integrity="sha384-r4NyP46KrjDleawBgD5tp8Y7UzmLA05oM1iAEQ17CSuDqnUK2+k9luXQOfXJCJ4I" crossorigin="anonymous">
        <link rel="stylesheet" lang="scss" href="{Astro.resolve('../css/main.css')}">
    </head>
    <body>
        <div class="main-container">
            <div class="top-nav">
                <a href={GITHUB_REPO} class="nav-pill"><Github/>GitHub</a>
                <a href={DISCORD_INVITE} class="nav-pill"><Discord/>Discord</a>
            </div>
            <div class="hero-div">
                <div class="row">
                    <div class="col-md-4" style="display: flex; align-items: center;">
                        <div class="hero-text">
                            <AugHipLogoType />
                            <p style="margin: .5em 0;">Create a virtual hip tracker in SteamVR using only the position of your head and feet.
                            <br><br>Compatible with most full-body tracking methods (more below).</p>
                            <div class="hero-buttons">
                                <a href="#info" class="button">Learn More</a>
                                <a href="#download" class="button button-branded">Download</a>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="video-container" style="width: 100%; height: 100%;">
                            <video autoplay="true" muted loop class="hero-video" poster="/content/shared/media/video_poster.webp">
                                <source src="/content/shared/media/demo.mp4" type="video/mp4">
                            </video>
                        </div>
                    </div>
                </div>
            </div>
            <div class="blerbs" id="info">
                <div class="row">
                    <div class="col-md-6">
                        <div class="blerb">
                            <h1 style="-webkit-text-stroke: 1.5px #FFFFFF;text-align:center;">Works with almost anything!</h1>
                            <h3 style="text-align: center; margin-bottom: .5em;">As long as your head and feet are being tracked, it will work.</h3>
                            <div class="logo-row">
                                    <ViveTracker />
                                    <ViveWand />
                                    <TundraLabs />
                                    <KinectV1 />
                                    <KinectV2 />
                                    <PSMove />
                                    <PSEye />
                                    <a onClick="depression()" style="color:transparent" title="⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀
⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀
⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀
⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀
⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀
⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀
⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀
⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀
⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀
⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀
⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀">
                                        <Apriltag/>
                                   </a>
                                   <TouchLink />
                            </div>
                            <div class="row" style="width: 100%; margin-top: .5em; text-align: center; flex-shrink: 1;">
                                <div class="col">
                                    <p style="font-size: 1.4em;">Vive Trackers<br>Vive Controllers<br>Tundra Trackers<br>All SteamVR devices<br>Xbox 360 Kinect</p>
                                </div>
                                <div class="col">
                                    <p style="font-size: 1.4em;">Xbox One Kinect<br>PS Move + Eye<br>Apriltags<br>Oculus Touch Link<br>and more!</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="blerb">
                            <h1 style="-webkit-text-stroke: 1.5px #FFFFFF;">How it works:</h1>
                            <h3 style="text-align: left; margin-bottom: .5em;">By using inverse kinematics, the position and rotation of the waist can be approximated based on the position of the head and feet. Because there's only a certain way that the body can move.
                            <br><br><br><br>
                            <a href="https://en.wikipedia.org/wiki/Inverse_kinematics" style="color: var(--brand-color);">Read more on inverse kinematics</a>
                        </h3>
                        </div>
                    </div>
            </div>
        </div>
        <div class="downloads" id="download">
            <div class="row">
                <div class="col-md-6">
                    <div class="download-col">
                        <p><br></p>
                        <h1 style="-webkit-text-stroke: 1.5px #FFFFFF; text-align: center;">Quick Setup</h1>
                        <h3 style="text-align: center;"><br>Download the graphical installer<br>to auto-configure everything.
                        <br><br><br>
                    </h3>
                    <a href={LATEST_INSTALLER} target="_blank" class="button">Download Installer</a>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="download-col">
                        <p><br></p>
                        <h1 style="-webkit-text-stroke: 1.5px #FFFFFF; text-align: center;">For advanced users</h1>
                        <h3 style="text-align: center; margin-bottom: .5em;"><br>Download the driver and manually<br>add it to SteamVR.
                        <br><br><br>
                    </h3>
                    <a href={GITHUB_RELEASES} class="button">Releases on GitHub</a>
                    </div>
                </div>
            </div>
            <div style="text-align: center; margin-top: 1.5em;">
                <code>aughip-installer-gui v0.1</code>
                <code>augmented-hip v0.1</code>
            </div>
        </div>
        </div>
        <div class="footer">
            <p style="color: #aaaaaa;">Made with <Heart height="1.5rem"/> by Hekky</p>
            <p style="color: #aaaaaa; font-size: 1.1em; line-height: .6em;">Licensed under GPLv3</p>
        </div>

        <script>
        // made by the most retarded person you don't know: Hekky / Hyblocker

        const WIDTH_MIN = 40;
        const WIDTH_MAX = 80;

        const crewmateDirections = [
            { x: 51,	y: 43 },
            { x: 412,	y: 22 },
            { x: 54,	y: 15 },
            { x: 0,		y: 1  },
            { x: 83,	y: 19 },
        ];
        const degToRad = 0.01745329;
        const TIMESTEP = 1.0 / 30.0;
        const crewmates = [];
        const crewmateIds = [];
        const crewmatePalettes = [
            { body: "0a4d2e", shadow: "11802d", outline: "052519" }, // green
            { body: "a8044c", shadow: "ff1010", outline: "230110" }, // red
            { body: "1E1F26", shadow: "3F474E", outline: "000000" }, // gray
            { body: "3B177C", shadow: "6B2FBB", outline: "1C003F" }, // purple
            { body: "C38822", shadow: "FFEB5A", outline: "432800" }, // yellow
            { body: "AC2BAE", shadow: "EE54BB", outline: "691A6B" }, // pink
            { body: "5E2615", shadow: "71491E", outline: "260E08" }, // brown
            { body: "15A842", shadow: "50F039", outline: "0A511F" }, // lime
            { body: "09158E", shadow: "132ED2", outline: "030938" }, // blue
            { body: "B43E15", shadow: "F07D0D", outline: "381306" }, // orange
            { body: "8495C0", shadow: "D7E1F1", outline: "242935" }, // light gray
        ];

        function spawnCrewmate() {
            const amogus = document.createElement('div');
            amogus.classList.add('amongus', 'crewmate');

            const crewmateID = Math.floor(Math.random() * 4);
            const palette = crewmatePalettes[Math.floor(Math.random() * crewmatePalettes.length)];

            amogus.innerHTML = crewmateIds[crewmateID]
                .replaceAll('var(--body)', `#${palette.body}`)
                .replaceAll('var(--shadow)', `#${palette.shadow}`)
                .replaceAll('var(--outline)', `#${palette.outline}`);

            let rotation = Math.random() * 360.0;
            let posX = Math.random() * document.body.clientWidth;
            let posY = Math.random() * document.body.scrollHeight;
            let scale = Math.random() * 0.6 + 0.8;

            amogus.style.cssText = `transform: scale(${scale}) translate(${posX}px, ${posY}px) rotate(${rotation}deg)`;

            crewmates.push({
                element: amogus,
                position: {
                    x: posX,
                    y: posY,
                },
                velocity: rotate(crewmateDirections[crewmateID], rotation),
                scale: scale,
                speed: scale * 10,
                rotation: rotation,
            });

            return amogus;
        }

        // normalize all vectors
        crewmateDirections.forEach(dir => {
            const len = Math.sqrt(dir.x * dir.x + dir.y * dir.y);
            dir.x /= len;
            dir.y /= len;
        });

        let committedSuicide = false;

        async function depression(e) {

            if (committedSuicide)
                return;

            committedSuicide = true;

            const i_love_this_song = new Audio("/content/shared/media/society.ogg");

            // A CERTIFIED JAVASHIT MOMENT!!!!
            if (typeof i_love_this_song.loop == 'boolean') {
                i_love_this_song.loop = true;
            } else {
                i_love_this_song.addEventListener('ended', function() {
                    this.currentTime = 0;
                    this.play();
                }, false);
            }
            await i_love_this_song.play();
            window.REALLY_LOUD_DRUM_AND_BASS = i_love_this_song;

            const totalCrewmates = document.body.getAttribute('data-max-crewmates') ?? 256;

            // load crewmate svgs into memory
            for (let i = 0; i < 5; i++) {
                await fetchCrewmate(i);
            }

            // create the crewmate container, and add it to the DOM
            const amogusContainer = document.createElement('div');
            amogusContainer.classList.add('amogus', 'crewmate-container');
            document.body.appendChild(amogusContainer);

            // have fun taking pissshots now
            window.toggleAmogus = function() {
                amogusContainer.style.display = amogusContainer.style.display == 'none' ? 'block' : 'none';
            };

            // spawn the sus
            for (let i = 0; i < totalCrewmates; i++) {
                amogusContainer.appendChild(spawnCrewmate());
            }

            // animate
            window.requestAnimationFrame(animate);
        }

        // Animates a vector by the given angle
        function rotate(vec, angle) {
            return {
                x: (Math.cos(degToRad * angle) * vec.x - Math.sin(degToRad * angle) * vec.y),
                y: (Math.sin(degToRad * angle) * vec.x + Math.cos(degToRad * angle) * vec.y)
            }
        }

        let elapsed = 0;

        function animate(timestep) {
            let delta = timestep - elapsed;
            elapsed += delta;

            for (let i = 0; i < crewmates.length; i++) {
                const impostor = crewmates[i];
                impostor.position.x += TIMESTEP * impostor.velocity.x * impostor.speed * delta * 0.01;
                impostor.position.y += TIMESTEP * impostor.velocity.y * impostor.speed * delta * 0.01;

                if (outOfBounds(impostor)) {

                    const crewmateID = Math.floor(Math.random() * 4);
                    const palette = crewmatePalettes[Math.floor(Math.random() * crewmatePalettes.length)];

                    // change palette
                    impostor.element.innerHTML = crewmateIds[crewmateID]
                        .replaceAll('var(--body)', `#${palette.body}`)
                        .replaceAll('var(--shadow)', `#${palette.shadow}`)
                        .replaceAll('var(--outline)', `#${palette.outline}`);

                    impostor.rotation = Math.random() * 360.0;
                    impostor.scale = (Math.random() * 0.6 + 0.8);
                    impostor.speed = impostor.scale * 10;
                    impostor.position.x = Math.sign(2 * Math.random()) * impostor.speed + document.body.clientWidth;
                    impostor.position.y = Math.random() * document.body.scrollHeight;
                    impostor.velocity = rotate(crewmateDirections[crewmateID], impostor.rotation);
                }

                impostor.element.style.transform = `scale(${impostor.scale}) translate(${impostor.position.x}px, ${impostor.position.y}px) rotate(${impostor.rotation}deg)`;
            }

            window.requestAnimationFrame(animate);
        }
        function outOfBounds(impostor) {
            return !(
                impostor.position.x > -impostor.scale * 50 &&
                impostor.position.x < document.body.scrollWidth + impostor.scale * 50 &&

                impostor.position.y > 60 -impostor.scale * 50 &&
                impostor.position.y < document.body.scrollHeight + impostor.scale * 50
            );
        }

        // fetches a crewmate
        async function fetchCrewmate(id) {
            await fetch( `/content/shared/impostors/crewmate${id + 1}.svg`)
                .then(r => r.text())
                .then(text => {
                    crewmateIds[id] = text;
                })
                .catch(console.error.bind(console));
        }
        </script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js" integrity="sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0" crossorigin="anonymous"></script>
    </body>
</html>